/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Comida)
package controle;

public class Comida
{
  public static void main(String args []) throws ParseException
  {
    Comida parser = new Comida(System.in);
    while (true)
    {
      System.out.println("Sirva Seu Prato:");
      try
      {
        Comida.programa();
        System.out.println("Foi Encontrado Pure no Cachorro Quente.");
      }
      catch (Exception e)
      {
        System.out.println("Foi encontrado uva passa no arroz.");
        System.out.println(e.getMessage());
        Comida.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Erro fatal.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Comida)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* PALAVRAS-CHAVE */
{
  < ARROZ : "arroz" >
| < FEIJAO : "feijão" >
| < PAO : "pão" >
| < SALAME : "salame" >
| < PIMENTA : "pimenta" >
| < LINGUICA : "linguiça" >
| < BATATA_PALHA : "batata_palha" >
| < BATATA_RUSTICA : "batata_rustica" >
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < EXP : "**" >
| < CONCAT : "\\+" >
}

TOKEN :
{
    < ID: (["a"-"z", "A"-"Z"])+
    (["a"-"z", "A"-"Z", "0"-"9"])* >
}



TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

void programa() :
{ }
{
  < ARROZ > "{" comandos() "}" < FEIJAO >
}

void comandos() :
{ }
{
  (declaracao() | expressao() | condicional() | loop())*
}

void declaracao() :
{ }
{
  ( < PAO > | < SALAME > | < PIMENTA > | < LINGUICA > ) < ID > ";"
}

void expressao() :
{ }
{
  sum()
}

void sum() :
{ }
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{ }
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    | < EXP >
    )
    unary()
  )*
}

void unary() :
{ }
{
  < MINUS > element()
| element()
}

void element() :
{ }
{
  < CONSTANT >
| < ID >
| "(" sum() ")"
}

void condicional() :
{ }
{
  < BATATA_PALHA > "(" condicao() ")" "{" comandos() "}" 
  ( < BATATA_RUSTICA > "{" comandos() "}" )?
}

void condicao() :
{ }
{
  expressao() ( "==" | "!=" | ">" | "<" | ">=" | "<=" ) expressao()
}

void loop() :
{ }
{
  "grelha:" expressao() "->" condicao() "->" expressao() "{" comandos() "}"
| "churrasqueira" "(" condicao() ")" "{" comandos() "}"
}