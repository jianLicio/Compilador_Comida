PARSER_BEGIN(Comida)
package controle;


public class Comida
{
  public static void main(String args []) throws ParseException
  {
    Comida parser = new Comida(System.in);
    while (true)
    {
      System.out.println("Sirva Seu Prato:");
      try
      {
        Comida.programa();
        System.out.println("A MESA TA PRONTA.");
      }
      catch (Exception e)
      {
        System.out.println("Foi encontrado uva passa no arroz.");
        System.out.println(e.getMessage());
        Comida.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("FOI ENCONTRADO PURE NO CACHORRO QUENTE.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Comida)

SKIP :
{
  " "
| "\r"
| "\t"
| < "tio_do_pave" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "e_a_faculdade" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* PALAVRAS-CHAVE */
{
  < ARROZ : "arroz" >					//INICIO
| < FEIJAO : "feijao" >					//FIM
| < PAO : "pao" >						//INTEIRO
| < SALAME : "salame" >					//FLUTUANTE
| < PIMENTA : "pimenta" >				//STRING
| < LINGUICA : "linguica" >				//BOLEANO
| < BATATA_PALHA : "batata_palha" >		//SE
| < BATATA_RUSTICA : "batata_rustica" > //SE N√ÉO
| < TA_NA_MESA : "ta_na_mesa" >			//MOSTRAR
| < ENTER : "\n" >						//PULAR LINHA
}
TOKEN : /* LIMITADORES */
{
  < ABRE_PARENTESES : "(" >
| < FECHA_PARENTESES : ")" >
| < ABRE_CHAVE : "{" >
| < FECHA_CHAVE : "}" >
| < VIRGULA : "," >
| < PONTO_VIRGULA : ";" >
| < DELIMITAR_TEXTO : "'" >
| < SETA : "->" >
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < EXP : "**" >
| < CONCAT : "++" >
}

TOKEN :
{
  < FALSO : "falso" >
| < VERDADEIRO : "verdadeiro" >
}

TOKEN : /* TIPOS OPERADORES */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MENOR_IGUAL : "<=" >
| < MAIOR_IGUAL : ">=" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < ATRIBUIR : "=" >
}

TOKEN : /* LETRAS E NUMEROS*/
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < NUMERO :
    < DIGITO >
  | < DIGITO > "." < DIGITO >>
| < #DIGITO : ([ "0"-"9" ])+ >
}

void mostrar() :
{}
{
  < TA_NA_MESA >
}

void se() :
{}
{
  < BATATA_PALHA >
}

void seNao() :
{}
{
  < BATATA_RUSTICA >
}

void enter(): 
{}
{
  (<ENTER>)*
}

void abreParenteses() :
{}
{
  < ABRE_PARENTESES >
}

void fechaParenteses() :
{}
{
  < FECHA_PARENTESES >
}

void abreChave() :
{}
{
  < ABRE_CHAVE >
}

void fechaChave() :
{}
{
  < FECHA_CHAVE >
}

void virgula() :
{}
{
  < VIRGULA >
}

void pontoVirgula() :
{}
{
  < PONTO_VIRGULA >
}

void delimitaTexto() :
{}
{
  < DELIMITAR_TEXTO >
}

void ta_na_mesa() :
{ }
{
  < TA_NA_MESA >
}

void programa() :
{ }
{
  < ARROZ > < ABRE_CHAVE > comandos() < FECHA_CHAVE > < FEIJAO >
}

void numero() :
{}
{
  < NUMERO >
}

void letra() :
{}
{
	(letraMinuscula() | letraMaiuscula() )+
}

void letraMinuscula() :
{}
{
  < LETRA_MINUSCULA >
}

void letraMaiuscula() :
{}
{
  < LETRA_MAIUSCULA >
}

void operadorLogico() :
{
  RecoverySet g = First.operadorLogico;
}
{
  try
  {
    menor()
  | maior()
  | menorIgual()
  | maiorIgual()
  | diferente()
  | igual()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "operadorLogico");
  }

}

void texto() :
{
  RecoverySet g = First.texto;
}
{
  try
  {
    delimitaTexto() (letra()
  | numero()) + delimitaTexto()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "texto");
  }

}

void id() :
{
  RecoverySet g = First.id;
}
{
  try
  {
  	letra()
  	(
   	 letra()
 	 | numero()
 	 | "_"
 	 )*
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "id");
  }

}

void comandos() :
{ }
{
  (
    imprimir()
  	| declaracao()
  	| atribuicao()
  	| expressao()
  	| condicional()
  	| loop()
  	| vazio()
  )*
}

void vazio() :
{ }
{
  ""
}

void imprimir() :
{
  RecoverySet g = First.imprimir;
}
{
  try
  {
    ta_na_mesa()
    abreParenteses()
    (
      texto()
  	  | id()
  	)
  	fechaParenteses()
  	pontoVirgula()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "imprimir");
  }

}

void declaracao() :
{ }
{
  ( < PAO > | < SALAME > | < PIMENTA > | < LINGUICA > ) < ID > ";"
}

void atribuicao() :
{ }
{
  < ID > "=" expressao() ";"
}

void expressao() :
{ }
{
  sum()
}

void sum() :
{ }
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{ }
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    | < EXP >
    )
    unary()
  )*
}

void unary() :
{ }
{
  < MINUS > element()
| element()
}

void element() :
{ }
{
  < CONSTANT >
| < ID >
| < FALSO >
| < VERDADEIRO >
| "(" sum() ")"
}

void condicional() :
{ }
{
  < BATATA_PALHA > "(" condicao() ")" "{" comandos() "}" 
  ( < BATATA_RUSTICA > "{" comandos() "}" )?
}

void condicao() :
{ }
{
  expressao() ( "==" | "!=" | ">" | "<" | ">=" | "<=" ) expressao()
}

void loop() :
{ }
{
  "grelha:" expressao() "->" condicao() "->" atribuicao() "{" comandos() "}"
| "churrasqueira" "(" condicao() ")" "{" comandos() "}"
}

void menor() :
{}
{
  < MENOR >
}

void maior() :
{}
{
  < MAIOR >
}

void menorIgual() :
{}
{
  < MENOR_IGUAL >
}

void maiorIgual() :
{}
{
  < MAIOR_IGUAL >
}

void diferente() :
{}
{
  < DIFERENTE >
}

void igual() :
{}
{
  < IGUAL >
}

void atribuir() :
{}
{
  < ATRIBUIR >
}
